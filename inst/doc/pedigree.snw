%\VignetteIndexEntry{pedigree Example}
%\VignetteDepends{kinship2}
%\VignetteKeywords{pedigree, kinship, shrink}
%\VignettePackage{kinship2}

%**************************************************************************
%
% # $Id:$

% $Revision:  $
% $Author: Jason Sinnwell$
% $Date:  $


\documentclass[letterpaper]{article}

\usepackage{Sweave}

\textwidth 7.5in
\textheight 8.9in
\topmargin  0.1in
\headheight 0.0in
\headsep 0.0in
\oddsidemargin  -30pt
\evensidemargin  -30pt


<<desc, include=FALSE, echo=FALSE>>=
options(width = 90)
desc <- packageDescription("kinship2")
@

\title{kinship2 package vignette \\ 
        Version \Sexpr{desc$Version}}
\author{Jason Sinnwell and Beth Atkinson}
\begin{document}
\maketitle


\section{Introduction}
This document is a brief tutorial for the kinship2 package, with examples 
of creating pedigree objects and kinship matrices, and other pedigree 
utilities.  If the kinship2 package is not loaded, we load it now.

<<echo=TRUE, eval=FALSE>>=
library(kinship2)
@

<<echo=FALSE, eval=TRUE>>=
require(kinship2)
@

\section{Basic Usage}

\subsection*{Example Data}
Two datasets are provided within the kinship2 package: 
\begin{itemize}
\item{\em breast:}{ 17 families from a breast cancer study}
\item{\em sample.ped:}{ two sample pedigrees, with 41 and 14 subjects}
\end{itemize}

\noindent This vignette uses the two pedigrees in $sample.ped$. For more 
information on these datasets, see $help(breast)$ and 
$help(sample.ped)$. 

\subsection*{Pedigree}

First, we load $sample.ped$ and look at some of the values 
in the dataset, and create a {\em pedigreeList} object using the 
$pedigree()$ function.  We use the required arguments 
$id$, $father$, $mother$, and $sex$.  The $famid$ argument is 
required to make a {\em pedigreeList} object, but not for a single 
{\em pedigree} object. 

<<pedList>>=

data(sample.ped)
sample.ped[1:10,]

pedAll <- pedigree(id=sample.ped$id, 
                dadid=sample.ped$father, momid=sample.ped$mother, 
                sex=sample.ped$sex, famid=sample.ped$ped)

print(pedAll)

@ 

\noindent The {\em pedigreeList} object can be subset to individual pedigrees 
by their family id.  The pedigree object has a print and plot method, which 
we show below.  The print method prints a short summary of the pedigree, 
while the plot in Figure~\ref{basicPed2} displays the smaller pedigree.

\begin{figure}[h]
  \begin{center}
<<eval=TRUE, fig=TRUE, echo=TRUE>>=

ped1basic <- pedAll['1']
ped2basic <- pedAll['2']

print(ped1basic)
print(ped2basic)

plot(ped2basic)
# plot(ped1basic)
@ 
   \caption{Basic Plot: pedigree 2} \label{basicPed2}
  \end{center}
\end{figure}
\clearpage


\subsection*{Kinship}

A common use for pedigrees is to make a matrix of kinship coefficients that 
can be used in mixed effect models.  A kinship coefficient is the probability 
that a randomly selected allele from two people at a given locus will be 
identical by descent (IBD), assuming all founder alleles are independent. 
For example, we each have two alleles per 
autosomal marker, so sampling two alleles with replacement from our own 
DNA has only $p=0.50$ probability of getting the same allele twice.  

\subsection*{Kinship for pedigree object}
We use {\em kinship} to calculate the kinship matrix for $ped2basic$. The 
result is a special symmetrix matrix class from the
$Matrix$ R package\cite{BatesMaechler},  which is stored efficiently to avoid
repeating elements.

<<kinship>>=

kin2 <- kinship(ped2basic)

kin2

@ 

\noindent For family 2, see that the row and column names match the id in 
Figure~\ref{basicPed2}, and see that each person's coefficient with 
themselves is $0.50$, siblings are $0.25$ (e.g. $204-205$), and pedigree 
marry-ins 
only share alleles IBD with their children with coefficient $0.25$ 
(e.g. $203-210$). The plot can be used to verify other kinship coefficients.

\subsection*{Kinship for pedigreeList object}

The kinship function also works on a {\em pedigreeList} object. 
We show how to create the kinship matrix, then 
show a snapshot of them for the two families, where the row and columns names
are the ids of the subject.

<<kinAll>>=

pedAll <- pedigree(id=sample.ped$id, 
                dadid=sample.ped$father, momid=sample.ped$mother, 
                sex=sample.ped$sex, famid=sample.ped$ped)

kinAll <- kinship(pedAll)

kinAll[1:14,1:14]

kinAll[40:43,40:43]

kinAll[42:46, 42:46]

@

\noindent Note that subject $113$ is not in pedigree 1 because they 
are a marry-in without children in the pedigree. Subject $113$ is in their own 
pedigree of size 1 in the $kinAll$ matrix at index $41$. We later show how 
to handle such marry-ins for plotting.

\section{Optional Pedigree Features}

We use pedigree 2 from $sample.ped$ to sequentially 
add optional information to the pedigree object.

\subsection*{Status}
The example below shows how to specify a $status$ indicator, such as 
vital status. The $sample.ped$ data does not include such an  
indicator, so we create one to indicate that the first generation of 
pedigree 2, subjects 1 and 2, are deceased.  

<<censor>>=

df2 <- sample.ped[sample.ped$ped==2,]
names(df2)

df2$censor <- c(1,1, rep(0, 12))

ped2 <- pedigree(df2$id, df2$father, df2$mother, 
                 df2$sex, status=df2$censor)

@ 

\subsection*{Affected Indicators}

We show how to specify affected status with a single indicator and 
multiple indicators in a matrix.  First, we use the affected indicator from 
$sample.ped$, which contains 0/1 indicators and NA as missing, and let's 
imagine it indicates blue eyes. Next, we create a matrix to contain the 
affected indicator from $sample.ped$ and a second indicator that we create, 
imagine as an indicator for baldness.

<<affected>>=

ped2 <- pedigree(df2$id, df2$father, df2$mother, 
                 df2$sex, affected=df2$affected,
                 status=df2$censor)

aff2 <- data.frame(blue=df2$affected, 
                   bald=c(0,0,0,0,1,0,0,0,0,1,1,0,0,1))

ped2 <- pedigree(df2$id, df2$father, df2$mother, 
                 df2$sex, affected=as.matrix(aff2),
                 status=df2$censor)

@        

\subsection*{Special Relationships}

Special pedigree relationships can be specified in a matrix 
as the $relation$ argument.  There are 4 relationships that can 
be specified by numeric codes: 1=Monozygotic twins, 2=Dizygotic twins, 
3=Twins of unknown zygosity, and 4=Spouse. The spouse relationship can 
indicate a marry-in when a couple does not have children together.

Below, we create a matrix of relationships for monozygotic and 
unknown-zygosity twins in the most recent generation of pedigree 2.  

<<twins>>=

## create twin relationships
relate2 <- matrix(c(210,211,1,
                   212,213,3), nrow=2, byrow=TRUE)

ped2 <- pedigree(df2$id, df2$father, df2$mother, 
                 df2$sex, affected=as.matrix(aff2),
                 status=df2$censor,
                 relation=relate2)
@

\section{Pedigree Plot Details}

The plot method does an admirable job plotting pedigrees within the
standard R plotting paradigm.  It attempts to adhere to many standards
in pedigree plotting, as presented in Bennet et al., 2008\cite{Bennet2008}.

We show in Figure~\ref{updatePed2} the plot of the updated 
pedigree 2.  The plot shapes for each subject are divided into two equal 
parts and shaded differently to indicate the two affected indicators.
Also, the two deceased subjects are displayed with a diagonal line 
through the shape. The twin relationships are both represented with 
diverging lines from a single point.  The monozygotic twins have an 
additional line connecting the diverging lines, while the other twins have 
a question mark to indicate unknown zygosity.

We also show how the subjects can be colored individually, where we 
color a subject's shape red if their $avail$ indicator is 1, which can 
represent their DNA availability, a useful indicator in genetic studies.
Lastly, we show how to use the $id$ argument in the plot method to add 
additional information under each subject. In the example below, we add 
names to the existing $id$ vector using the newline character as the 
$sep$ argument in $paste()$.  As space permits, more lines 
and characters per line can be made using the $id$ argument.

Finally, we show how a pedigree.legend can place a simple legend in one
of the corners of the pedigree plot to show the sections of the plot 
symbols corresponding to the multiple affected indicators.


\begin{figure}[h]
  \begin{center}
<<ped2update, eval=TRUE, fig=TRUE, echo=TRUE>>=
id2 <- paste(df2$id, c("John", "Linda", "Jack", "Rachel", "Joe", "Deb", 
                         "Lucy", "Ken", "Barb", "Mike", "Matt", 
                         "Mindy", "Mark", "George"), sep="\n")

plot(ped2, col=ifelse(df2$avail, 2, 1),
     id=id2)

pedigree.legend(ped2, location="topright", radius=.3) 
@ 
   \caption{Updated plot: pedigree 2} \label{updatePed2}
  \end{center}
\end{figure}
\clearpage

\noindent To show some other tricks with pedigree plotting, we use pedigree 1 
from $sample.ped$, which has 41 subjects in 4 generations, including a
generation with double first cousins. After the first marriage of $114$, they
remarried subject $113$ without children between them.  If we do not 
specify the marriage with the $relation$ argument, the plot method excludes
subject $113$ from the plot. The basic plot of pedigree 1 is shown 
in Figure~\ref{basicPed1}, where the subjects are colored red if their 
$avail$ indicator is 1.

\begin{figure}[h]
  \begin{center}
<<fig=TRUE, echo=TRUE>>=
df1<- sample.ped[sample.ped$ped==1,]
relate1 <- matrix(c(113, 114, 4), nrow=1)

ped1 <- pedigree(df1$id, df1$father, df1$mother, 
       df1$sex, affected=df1$affected, 
                 relation=relate1)

print(ped1)
plot(ped1, col=df1$avail+1)

@ 
   \caption{Pedigree 1, Original} \label{basicPed1}
  \end{center}
\end{figure}
\clearpage

\subsection*{Align by Input Order}

The plot method does a decent job aligning subjects given the order of the 
subjects when the pedigree object is made, and sometimes has to make two 
copies of a subject.  If we change the order of the subjects when creating 
the pedigree, we can help the plot method reduce the need to duplicate 
subjects, as Figure~\ref{reordPed1} no longer has subject $110$ duplicated.

\begin{figure}[h]
  \begin{center}
<<ordering, echo=TRUE, fig=TRUE>>=

df1reord <- df1[c(35:41,1:34),]
ped1reord <- pedigree(df1reord$id, df1reord$father, df1reord$mother, 
       df1reord$sex, affected=df1reord$affected, relation=relate1)

plot(ped1reord, col=df1reord$avail+1)

@ 
   \caption{Pedigree 1, Re-Ordered} \label{reordPed1}
  \end{center}
\end{figure}
\clearpage


\section{Pedigree Utility Functions}

\subsection*{Data.Frame}

A pedigree object's main features are vectors with an element
for each subject. It is sometimes useful to extract these vectors from 
the pedigree object into a $data.frame$ with basic information that can
be used to construct a new pedigree object. This is possible with the
$as.data.frame()$ method, as shown below.

<<ped2df>>=


dfped2 <- as.data.frame(ped2)
dfped2

@ 

\subsection*{Subsetting and Trimming}

Pedigrees with large size can be a bottleneck for programs that run 
calculations on them. The kinship2 package contains some routines to 
identify which subjects to remove.  We show how a subject 
(e.g. subject 210) can be removed from 
$ped2$, and how the pedigree object is changed by verifying that the
$relation$ matrix no longer has the twin relationship between subjects 
210 and 211, as indicated by $indx1$ and $indx2$. Also note that
the $relation$ matrix indices are updated for persons $212$ and $213$ who
have index $11$ and $12$ after subject $210$ is removed.

<<subset>>=

ped2.rm210 <- ped2[-10]

data.frame(ped2.rm210)

ped2.rm210$relation

ped2$relation


@ 

\noindent The steps above only work for subsetting by the index of the 
pedigree object vectors, not by the $id$ of the subjects themselves.  
We provide $pedigree.trim$, which trims subjects from a pedigree by 
their $id$.  Below is an example of removing subject 110, as done above, 
then we further trim the pedigree by a vector of subject ids. We check the
trimming by looking at the $id$ vector and the $relation$ matrix.

<<trim>>=

ped2.trim210 <- pedigree.trim(210, ped2)

ped2.trim210$id
ped2.trim210$relation

ped2.trim.more <- pedigree.trim(c(212,214), ped2.trim210)
ped2.trim.more$id

ped2.trim.more$relation

@ 


\section{Shrinking}

A new function in kinship2 is $pedigree.shrink$, which shrinks a pedigree
to a specified bit size while maintaining the maximal amount of 
information for genetic linkage and association studies.  Using an indicator 
for availability and affected status, it removes subjects in this order:
\begin{enumerate}
  \item unavailable with no available descendants
  \item available and are not parents
  \item available who have missing affected status
  \item available who are unaffected
  \item available who are affected
\end{enumerate}

\noindent We show how to shrink pedigree 1 to bit size $30$, which happens 
to be the bit size after removing only the unavailable subjects.  We show how 
to extract the shrunken pedigree object from the $pedigree.shrink$ result, 
and plot it.

\begin{figure}[h]
  \begin{center}
<<fig=TRUE, echo=TRUE, eval=TRUE>>=

shrink1.B30 <- pedigree.shrink(ped=ped1,
                 avail=df1$avail, maxBits=30)

print(shrink1.B30)
ped1.B30 <- shrink1.B30$pedObj
plot(ped1.B30, col=shrink1.B30$avail + 1)


@ 
  \caption{Pedigree 1, 30 bits} \label{bit30Ped1}
  \end{center}
\end{figure}
\clearpage

\noindent Now shrink pedigree 1 to bit size $25$, which requires removing 
subjects who are informative.  If there is a tie between multiple subjects 
about who to remove, the method randomly chooses one of them. With this 
seed setting, the method removes subjects $126$ then $125$.


\begin{figure}[h]
  \begin{center}
<<fig=TRUE, echo=TRUE, eval=TRUE>>=

set.seed(10)
shrink1.B25 <- pedigree.shrink(ped=ped1, avail=df1$avail, 
                               maxBits=25)
print(shrink1.B25)
ped1.B25 <- shrink1.B25$pedObj

plot(ped1.B25, col=shrink1.B25$avail + 1)

@ 
 \caption{Pedigree 1, 25 bits} \label{bit25Ped1}
  \end{center}
\end{figure}
\clearpage


%\section{Acknowledgements}
%The datasets are provided by...

\section{Select Unrelateds}

In this section we briefly show how to use $pedigree.unrelated$ to find
a set of the maximum number of unrelated available subjects from a pedigree.
The input required is a pedigree object and a vector indicating availability.
In some pedigrees there are numerous sets of subjects that satisfy the maximum
number of unrelateds, so the method randomly chooses from the set. We 
show two sets of subject ids that are selected by the routine and discuss 
below.

<<unrelated>>=

df2<- sample.ped[sample.ped$ped==2,]

ped2 <- pedigree(df2$id, df2$father, df2$mother, 
       df2$sex, affected=df2$affected)

set.seed(10)
set1 <- pedigree.unrelated(ped2, avail=df2$avail)
set1
set2 <- pedigree.unrelated(ped2, avail=df2$avail)
set2

@ 


\noindent We can easily verify the sets selected by $pedigree.unrelated$ by
referring to Figure~\ref{basicPed2} and see that subjects $203$ and $209$ are
unrelated to everyone else in the pedigree except their children. Furthermore, 
we see in $df2$ that of these two, only subject $203$ is available. Therefore,
any set of unrelateds who are available must include subject
$203$ and one of the these subjects: $201$, $204$, $206$, $207$, $212$, 
and $214$, as indicated by the kinship matrix for pedigree 2 subset to those 
with availability status of $1$.

<<unrelVerify>>=

df2
kin2[df2$avail==1,df2$avail==1]

@ 


\section{R Session Information}
<<results=tex>>=
toLatex(sessionInfo())
@

\begin{thebibliography}{}

\bibitem{BatesMaechler}
Bates D and Maechler M. (2011). {\bf Matrix: Sparse and Dense Matrix
Classes and Methods.} R package version 0.999375-50.
{\em http://CRAN.R-project.org/package=Matrix}

  
\bibitem{Bennet2008}
Bennet RL, Steinhaus French K, Resta RG, Lochner Doyle D. (2008). 
{\bf Standardized Human Pedigree Nomenclature: Update and Assessment of 
    the Recommendations of the National Society of Genetic Counselors.} 
{\em J. Gene. Counsel.,} 17, 1424-433.

\bibitem{Sinnwell2011}
Sinnwell JP, Therneau TM, Atkinson EJ, Schaid DJ, Matsumoto ME, 
McDonnell SK (2011). {\bf kinship2: An enhancement to the kinship R package 
with additional pedigree utilities}. Submitted.

\end{thebibliography}
  
  
\end{document}
